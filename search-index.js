var N=null,E="",T="t",U="u",searchIndex={};
var R=["dir_assert","expected","dir_assert::Error","actual","string","pathbuf","assert_paths","Recursively scan contents of two directories and find…","result","formatter"];

searchIndex["dir_assert"]={"doc":"Compare contents of two directories.","i":[[4,"Error",R[0],E,N,N],[13,"Critical",E,"Error with system IO, unrecoverable, ceasing traverse of…",0,N],[13,"ExtraExpected",E,"Extra expected item exists",0,N],[13,"ExtraActual",E,"Extra actual item exists",0,N],[13,"InvalidComparison",E,"Found filename and directory sharing same name and path",0,N],[12,R[1],R[2],E,0,N],[12,R[3],E,E,0,N],[13,"FileContentsMismatch",R[0],"Two files with same path have different contents",0,N],[12,R[1],R[2],E,0,N],[12,R[3],E,E,0,N],[13,"MissingPath",R[0],"Top level directories are missing (eg. actual folder…",0,N],[5,R[6],E,R[7],N,[[["asref",["path"]],["path"]],[[R[8],["vec"]],["vec",["error"]]]]],[11,"new_critical",E,E,0,[[[R[4]],["into",[R[4]]]],["self"]]],[11,"new_extra_expected",E,E,0,[[["into",[R[5]]],[R[5]]],["self"]]],[11,"new_extra_actual",E,E,0,[[["into",[R[5]]],[R[5]]],["self"]]],[11,"new_invalid_comparison",E,E,0,[[["into",[R[5]]],[R[5]]],["self"]]],[11,"new_file_contents_mismatch",E,E,0,[[["into",[R[5]]],[R[5]]],["self"]]],[11,"new_missing_path",E,E,0,[[["into",[R[5]]],[R[5]]],["self"]]],[14,R[6],E,R[7],N,N],[11,"to_owned",E,E,0,[[["self"]],[T]]],[11,"clone_into",E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"to_string",E,E,0,[[["self"]],[R[4]]]],[11,"try_from",E,E,0,[[[U]],[R[8]]]],[11,"try_into",E,E,0,[[],[R[8]]]],[11,"borrow_mut",E,E,0,[[["self"]],[T]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,"type_id",E,E,0,[[["self"]],["typeid"]]],[11,"clone",E,E,0,[[["self"]],["error"]]],[11,"fmt",E,E,0,[[["self"],[R[9]]],[R[8]]]],[11,"fmt",E,E,0,[[["self"],[R[9]]],[R[8]]]]],"p":[[4,"Error"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);